name: Build FFmpeg

on:
  workflow_dispatch:

env:
  DOCKER_BUILDKIT: 1

jobs:
  build_base:
    name: Build base image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install buildx
        uses: docker/setup-buildx-action@v1
        with:
          config: .github/buildkit.toml
      - name: Login to Docker
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}
      - name: Image Name
        id: imagename
        run: echo "::set-output name=name::ghcr.io/${GITHUB_REPOSITORY,,}/base"
      - name: Stop Commands
        run: T="$(echo -n ${{ github.token }} | sha256sum | head -c 64)" && echo -e "::add-mask::${T}\n::stop-commands::${T}"
      - name: Build target base image
        uses: docker/build-push-action@v2
        with:
          context: images/base
          pull: true
          push: true
          tags: ${{ steps.imagename.outputs.name }}:latest
          cache-to: type=registry,mode=max,ref=${{ steps.imagename.outputs.name }}:cache
          cache-from: type=registry,ref=${{ steps.imagename.outputs.name }}:cache
  build_target_bases:
    name: Build target base image
    needs: build_base
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target: [win64]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install buildx
        uses: docker/setup-buildx-action@v1
        with:
          config: .github/buildkit.toml
      - name: Login to Docker
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}
      - name: Image Name
        id: imagename
        run: echo "::set-output name=name::ghcr.io/${GITHUB_REPOSITORY,,}/base-${{ matrix.target }}"
      - name: Stop Commands
        run: T="$(echo -n ${{ github.token }} | sha256sum | head -c 64)" && echo -e "::add-mask::${T}\n::stop-commands::${T}"
      - name: Build target base image
        uses: docker/build-push-action@v2
        with:
          context: images/base-${{ matrix.target }}
          pull: true
          push: true
          tags: ${{ steps.imagename.outputs.name }}:latest
          cache-to: type=registry,mode=max,ref=${{ steps.imagename.outputs.name }}:cache
          cache-from: type=registry,ref=${{ steps.imagename.outputs.name }}:cache
  build_targets:
    name: Build target-variant image
    needs: build_target_bases
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target: [win64]
        variant: [gpl-shared 4.4,gpl-shared 5.0]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install buildx
        uses: docker/setup-buildx-action@v1
        with:
          config: .github/buildkit.toml
      - name: Login to Docker
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}
      - name: Generate Dockerfile
        run: ./generate.sh ${{ matrix.target }} ${{ matrix.variant }}
      - name: Image Name
        id: imagename
        run: |
          IMG="ghcr.io/${GITHUB_REPOSITORY,,}/${{ matrix.target }}-${{ matrix.variant }}"
          echo "::set-output name=name::${IMG/ /-}"
      - name: Stop Commands
        run: T="$(echo -n ${{ github.token }} | sha256sum | head -c 64)" && echo -e "::add-mask::${T}\n::stop-commands::${T}"
      - name: Build target base image
        uses: docker/build-push-action@v2
        with:
          context: .
          pull: true
          push: true
          tags: ${{ steps.imagename.outputs.name }}:latest
          cache-to: type=registry,mode=max,ref=${{ steps.imagename.outputs.name }}:cache
          cache-from: type=registry,ref=${{ steps.imagename.outputs.name }}:cache
  build_ffmpeg:
    name: Build ffmpeg
    needs: build_targets
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target: [win64,linux64]
        variant: [gpl,lgpl,gpl 4.4,gpl 5.0,lgpl 4.4,lgpl 5.0,gpl-shared,lgpl-shared,gpl-shared 4.4,gpl-shared 5.0,lgpl-shared 4.4,lgpl-shared 5.0]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Login to Docker
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}
      - name: Build ffmpeg
        run: |
          T="$(echo -n ${{ github.token }} | sha256sum | head -c 64)" && echo -e "::add-mask::${T}\n::stop-commands::${T}"
          ./build.sh ${{ matrix.target }} ${{ matrix.variant }}
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ffmpeg
          path: artifacts/*
  publish_release:
    name: Publish release
    if: ${{ github.event_name == 'schedule' || github.event.inputs.doRelease == 'true' }}
    needs: build_ffmpeg
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: ffmpeg
          path: artifacts
      - name: Create release
        id: create_release
        run: |
          set -xe
          RELDATE="$(date +'%Y-%m-%d %H:%M')"
          NAME="Auto-Build $RELDATE"
          TAGNAME="autobuild-$(date +'%Y-%m-%d-%H-%M')"
          hub release create $(for a in artifacts/*.zip; do echo -a $a; done) -m "$NAME" -t "master" "$TAGNAME"
          echo "::set-output name=tag_name::${TAGNAME}"
          echo "::set-output name=rel_date::${RELDATE}"
        env:
          GITHUB_TOKEN: ${{ github.token }}
      - name: Update Latest
        run: |
          set -xe
          mkdir latest_artifacts
          ./util/repack_latest.sh latest_artifacts artifacts/*.zip
          NAME="Latest Auto-Build (${{ steps.create_release.outputs.rel_date }})"
          TAGNAME="latest"
          hub release delete "$TAGNAME" || true
          git push --delete origin "$TAGNAME" || true
          sleep 30
          hub release create $(for a in latest_artifacts/*; do echo -a $a; done) -m "$NAME" -t "master" "$TAGNAME"
        env:
          GITHUB_TOKEN: ${{ github.token }}
